
import requests

class GrafanaHandler:
    def __init__(self, grafana_host, grafana_key):
        self.grafana_key = grafana_key
        self.grafana_host = grafana_host
        self.headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.grafana_key}"
        }

    def apply_dashboard(self, dashboard_json):
        """Apply dashboard to Grafana via API"""
        url = f"{self.grafana_host}/api/dashboards/db"
        payload = {
            "dashboard": dashboard_json,
            "overwrite": True,
            "message": "Auto-generated by Prometheus Viewer"
        }

        try:
            response = requests.post(url, json=payload, headers=self.headers)
            if response.status_code == 200:
                result = response.json()
                result['url'] = f"{self.grafana_host}{result.get('url', '')}"
                return result
            return {"error": f"API Error {response.status_code}", "details": response.text}
        except Exception as e:
            return {"error": str(e)}
        

    def fetch_datasources(self):
        """Fetch and process Prometheus datasources from Grafana"""
        url = f"{self.grafana_host}/api/datasources"
        
        response = requests.get(url, headers=self.headers)
        if response.status_code == 200:
            processed_ds = []
            for ds in response.json():
                print("========+++++++++", ds)
                match ds.get('typeName'):
                    case 'Prometheus':
                        modified_ds = ds.copy()
                        modified_ds["uid"] = ds.get('uid', '')
                        modified_ds["name"] = str.lower(ds.get('typeName', ''))
                        processed_ds.append(modified_ds)
                    case 'PostgreSQL':
                        modified_ds = ds.copy()
                        modified_ds['name'] = str.lower(ds.get('typeName', ''))
                        modified_ds['uid'] = ds.get('uid', '')
                        processed_ds.append(modified_ds)
                    case _:
                        pass
            return processed_ds

        return []