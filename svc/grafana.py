import os
import requests
from svc import prometheus
import streamlit as st


grafana_key = os.getenv("GRAFANA_KEY")
grafana_host = os.getenv("GRAFANA_HOST", "http://localhost:3000")


def apply_grafana_dashboard(dashboard_json):
    """Apply dashboard to Grafana via API"""
    url = f"{grafana_host}/api/dashboards/db"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {grafana_key}"
    }
    
    payload = {
        "dashboard": dashboard_json,
        "overwrite": True,
        "message": "Auto-generated by Prometheus Viewer"
    }
    
    try:
        response = requests.post(url, json=payload, headers=headers)
        if response.status_code == 200:
            result = response.json()
            result['url'] = f"{grafana_host}{result.get('url', '')}"
            return result
        return {"error": f"API Error {response.status_code}", "details": response.text}
    except Exception as e:
        return {"error": str(e)}

def fetch_datasources():
    """Fetch and process Prometheus datasources from Grafana"""
    url = f"{grafana_host}/api/datasources"
    headers = {"Authorization": f"Bearer {grafana_key}"}
    
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            processed_ds = []
            for ds in response.json():
                # Only process Prometheus datasources
                if ds.get('type') == 'prometheus':
                    # Create a copy to avoid modifying original data
                    modified_ds = ds.copy()
                    modified_ds['adjusted_url'] = prometheus.adjust_prometheus_url(ds.get('url', ''))
                    processed_ds.append(modified_ds)
            return processed_ds
        st.error("Failed to fetch datasources")
        return []
    except Exception as e:
        st.error(f"Datasource error: {str(e)}")
        return []